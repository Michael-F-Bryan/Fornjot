#![allow(missing_docs, clippy::let_unit_value)] // For the types generated by #[sabi_trait]

use abi_stable::sabi_trait::TD_Opaque;

use crate::models::{model::Model_TO, Model};

/// An abstract interface to the Fornjot host.
#[abi_stable::sabi_trait]
#[allow(warnings)]
pub trait Host {
    /// Register a FFI-safe model. You are probably looking for
    /// [`HostExt::register_model()`].
    fn register_boxed_model(&mut self, model: crate::models::internal::Model);
}

impl<H: Host + ?Sized> Host for &'_ mut H {
    fn register_boxed_model(&mut self, model: crate::models::internal::Model) {
        (*self).register_boxed_model(model);
    }
}

impl<H: Host + ?Sized> Host for Box<H> {
    fn register_boxed_model(&mut self, model: crate::models::internal::Model) {
        (**self).register_boxed_model(model);
    }
}

/// Extension methods to augment the [`Host`] API.
pub trait HostExt {
    /// Register a model with the Fornjot runtime.
    fn register_model<M>(&mut self, model: M)
    where
        M: Model + 'static;
}

impl<H: Host + ?Sized> HostExt for H {
    fn register_model<M>(&mut self, model: M)
    where
        M: Model + 'static,
    {
        self.register_boxed_model(Model_TO::from_value(model, TD_Opaque));
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn host_is_object_safe() {
        let _: &dyn Host;
    }
}
