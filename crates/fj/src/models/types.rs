use abi_stable::{
    sabi_trait::TD_Opaque,
    std_types::{RBox, RBoxError, RResult},
    RMut, RRef,
};

use crate::models::Metadata;

/// The signature of the function generated by [`register_model`].
///
/// ```rust
/// fj::register_model!(|_| { todo!() });
///
/// const _: fj::models::internal::InitFunction = fj_model_init;
/// ```
pub type InitFunction =
    unsafe extern "C" fn(Host<'_>) -> RResult<Metadata, RBoxError>;

/// The name of the function generated by [`register_model`].
///
pub const INIT_FUNCTION_NAME: &str = "fj_model_init";

/// A FFI-safe version of [`crate::models::Model`].
pub type Model = crate::models::model::Model_trait::Model_TO<'static, RBox<()>>;

impl Model {
    /// Create a [`Model`].
    pub fn new<M>(model: M) -> Model
    where
        M: crate::models::Model + 'static,
    {
        Model::from_value(model, TD_Opaque)
    }
}

/// A FFI-safe version of [`crate::models::Host`].
pub type Host<'a> = crate::models::host::Host_trait::Host_TO<'a, RMut<'a, ()>>;

impl<'a> Host<'a> {
    /// Create a [`Host`].
    pub fn new<H>(host: &'a mut H) -> Host<'a>
    where
        H: crate::models::Host + 'a,
    {
        Host::from_ptr(host, TD_Opaque)
    }
}

/// A FFI-safe version of [`crate::models::Context`].
pub type Context<'a> =
    crate::models::context::Context_trait::Context_TO<'a, RRef<'a, ()>>;

impl<'a> Context<'a> {
    /// Create a [`Context`].
    pub fn new<C>(ctx: &'a C) -> Context<'a>
    where
        C: crate::models::Context + 'a,
    {
        Context::from_ptr(ctx, TD_Opaque)
    }
}
